import java.util.ArrayList;
import java.util.List;

class Person {
    private String name;
    private int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    String getName() {
        return name;
    }

    int getAge() {
        return age;
    }
}

class Student extends Person {
    private List<String> completedCourses;

    Student(String name, int age) {
        super(name, age);
        completedCourses = new ArrayList<>();
    }

    void completeCourse(String courseName) {
        completedCourses.add(courseName);
    }

    List<String> getCompletedCourses() {
        return completedCourses;
    }
}

class Professor extends Person {
    Professor(String name, int age) {
        super(name, age);
    }
}

class Course {
    private String courseName;
    private List<String> prerequisites;
    private List<Student> enrolledStudents;

    Course(String courseName, List<String> prerequisites) {
        this.courseName = courseName;
        this.prerequisites = prerequisites;
        this.enrolledStudents = new ArrayList<>();
    }

    void enrollStudent(Student student) {
        if (hasCompletedPrerequisites(student)) {
            enrolledStudents.add(student);
            System.out.println(student.getName() + " enrolled in " + courseName);
        } else {
            System.out.println(student.getName() + " cannot enroll in " + courseName + " due to incomplete prerequisites.");
        }
    }

    void displayEnrolledStudents() {
        System.out.println("Enrolled students in " + courseName + ":");
        for (Student student : enrolledStudents) {
            System.out.println("Name: " + student.getName() + ", Age: " + student.getAge() +
                    ", Completed Courses: " + student.getCompletedCourses());
        }
    }

    private boolean hasCompletedPrerequisites(Student student) {
        return student.getCompletedCourses().containsAll(prerequisites);
    }
}

public class UniversityEnrollmentSystem {
    public static void main(String[] args) {
        // Creating students
        Student student1 = new Student("Alice", 20);
        student1.completeCourse("Math101");
        student1.completeCourse("English101");

        Student student2 = new Student("Bob", 22);
        student2.completeCourse("Math101");

        // Creating a professor
        Professor professor = new Professor("Dr. Smith", 40);

        // Creating a course with prerequisites
        List<String> prerequisites = new ArrayList<>();
        prerequisites.add("English101");
        Course mathCourse = new Course("Mathematics", prerequisites);

        // Enrolling students in the course
        mathCourse.enrollStudent(student1);
        mathCourse.enrollStudent(student2);
        mathCourse.enrollStudent(professor); // Professor can't be enrolled as a student

        // Displaying enrolled students
        mathCourse.displayEnrolledStudents();
    }
}
